{"version":3,"sources":["components/home-page/index.js","components/home-page/home-page.jsx","components/navbar/index.js","components/navbar/navbar.jsx","components/about-me-page/index.js","components/about-me-page/about-me-page.jsx","components/item-page/item-page.jsx","components/item-page/index.js","components/app/index.js","components/app/app.jsx","serviceWorker.js","index.js"],"names":["HomePage","react_default","a","createElement","src","alt","Navbar","className","react_router_dom","to","Component","AboutMePage","homer","name","id","img","Item","_ref","match","items","find","_ref2","params","ItemPade","map","_ref3","key","concat","react_router","path","component","App","navbar","exact","Boolean","window","location","hostname","ReactDOM","render","components_app","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yOAEeA,ECAE,WACb,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,OAAKC,IAAI,uEAAuEC,IAAI,oDCJhFC,mLCIR,OACAL,EAAAC,EAAAC,cAAA,OAAKI,UAAU,iDACXN,EAAAC,EAAAC,cAAA,MAAII,UAAU,cACVN,EAAAC,EAAAC,cAAA,MAAII,UAAU,YACVN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAMD,UAAU,WAAWE,GAAG,KAA9B,SAEJR,EAAAC,EAAAC,cAAA,MAAII,UAAU,YACVN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAMD,UAAU,WAAWE,GAAG,aAA9B,aAEJR,EAAAC,EAAAC,cAAA,MAAII,UAAU,YACVN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAMD,UAAU,WAAWE,GAAG,SAA9B,kBAbgBC,aCDrBC,ECAK,WAChB,OACIV,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,OAAKC,IAAI,sEAAsEC,IAAI,YCFzFO,SAAQ,CACV,CAACC,KAAM,SAAUC,GAAI,IAAKC,IAAI,wEAC9B,CAACF,KAAM,SAAUC,GAAI,IAAKC,IAAI,wEAC9B,CAACF,KAAM,SAAUC,GAAI,IAAKC,IAAI,0EAG5BC,EAAO,SAAAC,GAAa,IAAXC,EAAWD,EAAXC,MACLC,EAAQP,EAAMQ,KAAK,SAAAC,GAAA,OAAAA,EAAEP,KAAcI,EAAMI,OAAOR,KACtD,OACIb,EAAAC,EAAAC,cAAA,OAAKI,UAAU,QACXN,EAAAC,EAAAC,cAAA,UAAKgB,EAAMN,MACXZ,EAAAC,EAAAC,cAAA,OAAKC,IAAKe,EAAMJ,IAAKV,IAAI,YCbtBkB,EDkBE,WACb,OACItB,EAAAC,EAAAC,cAAA,OAAKI,UAAU,aACXN,EAAAC,EAAAC,cAAA,UACKS,EAAMY,IAAI,SAAAC,GAAA,IAAEX,EAAFW,EAAEX,GAAGD,EAALY,EAAKZ,KAAL,OACPZ,EAAAC,EAAAC,cAAA,MAAIuB,IAAKZ,GACLb,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAMC,GAAE,SAAAkB,OAAWb,IAAOD,OAItCZ,EAAAC,EAAAC,cAACyB,EAAA,EAAD,CAAOC,KAAI,YAAeC,UAAWd,ME5BlCe,ECOH,WACR,OACI9B,EAAAC,EAAAC,cAAA,OAAKI,UAAU,OACPN,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACGP,EAAAC,EAAAC,cAAC6B,EAAD,MACA/B,EAAAC,EAAAC,cAACyB,EAAA,EAAD,KACA3B,EAAAC,EAAAC,cAACyB,EAAA,EAAD,CAAOK,OAAK,EAACJ,KAAK,IAAIC,UAAW9B,IACjCC,EAAAC,EAAAC,cAACyB,EAAA,EAAD,CAAOK,OAAK,EAACJ,KAAK,YAAYC,UAAWnB,IACzCV,EAAAC,EAAAC,cAACyB,EAAA,EAAD,CAAOC,KAAK,QAAQC,UAAWP,IAC/BtB,EAAAC,EAAAC,cAACyB,EAAA,EAAD,CAAUnB,GAAG,UCNZyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASnB,MACvB,2DCbNoB,IAASC,OAAOtC,EAAAC,EAAAC,cAACqC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.93fa0001.chunk.js","sourcesContent":["import HomePage from \"./home-page\"\r\n\r\nexport default HomePage","import React from \"react\";\r\n\r\nconst HomePage = () =>{\r\n    return(\r\n        <div>\r\n            <h3>Home</h3>\r\n            <img src=\"http://s.tcdn.co/837/98f/83798fe7-d57e-300a-93fa-561e3027691e/23.png\" alt=\"Homer\"/>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default HomePage;","import Navbar from \"./navbar\";\r\n\r\n export default Navbar;","import React, {Component} from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nexport default class Navbar extends Component {\r\n\r\n    render() {\r\n        return(\r\n        <nav className=\"navbar navbar-expand-sm bg-light navbar-light\">\r\n            <ul className=\"navbar-nav\">\r\n                <li className=\"nav-item\">\r\n                    <Link className=\"nav-link\" to=\"/\">Home</Link>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                    <Link className=\"nav-link\" to=\"/about-me\">About me</Link>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                    <Link className=\"nav-link\" to=\"/item\">Item</Link>\r\n                </li>\r\n            </ul>\r\n        </nav>\r\n        )\r\n    }\r\n}","import AboutMePage from \"./about-me-page\"\r\n\r\nexport default AboutMePage","import React from \"react\";\r\n\r\nconst AboutMePage = () =>{\r\n    return(\r\n        <div>\r\n            <h3>About me</h3>\r\n            <img src=\"http://s.tcdn.co/837/98f/83798fe7-d57e-300a-93fa-561e3027691e/9.png\" alt=\"Homer\"/>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default AboutMePage;","import React from \"react\";\r\nimport \"./item-page.css\";\r\nimport { Route, Link} from \"react-router-dom\";\r\n\r\nconst homer = [\r\n    {name: 'item 1', id: '1', img:'http://s.tcdn.co/837/98f/83798fe7-d57e-300a-93fa-561e3027691e/27.png'},\r\n    {name: 'item 2', id: '2', img:'http://s.tcdn.co/837/98f/83798fe7-d57e-300a-93fa-561e3027691e/10.png'},\r\n    {name: 'item 3', id: '3', img:'http://s.tcdn.co/837/98f/83798fe7-d57e-300a-93fa-561e3027691e/28.png'}\r\n];\r\n\r\nconst Item = ({match}) => {\r\n    const items = homer.find(({id})=> id === match.params.id);\r\n    return(\r\n        <div className=\"item\">\r\n            <h4>{items.name}</h4>\r\n            <img src={items.img} alt=\"Homer\"/>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst ItemPade = () => {\r\n    return(\r\n        <div className=\"item-page\">\r\n            <ul>\r\n                {homer.map(({id,name})=>(\r\n                    <li key={id}>\r\n                        <Link to={`/item/${id}`}>{name}</Link>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n            <Route path={`/item/:id`} component={Item}/>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default ItemPade;","import ItemPade from \"./item-page\";\r\n\r\nexport default ItemPade;","import App from \"./app\";\r\n\r\nexport default App;","import React from 'react';\r\nimport './app.css';\r\nimport {BrowserRouter as Router, Route, Switch, Redirect } from \"react-router-dom\"\r\nimport HomePage from \"../home-page\";\r\nimport Navbar from \"../navbar\";\r\nimport AboutMePage from \"../about-me-page\";\r\nimport ItemPade from \"../item-page\";\r\n\r\n\r\nconst App = () => {\r\n    return (\r\n        <div className=\"app\">\r\n                <Router>\r\n                   <Navbar/>\r\n                   <Switch>\r\n                   <Route exact path=\"/\" component={HomePage}/>\r\n                   <Route exact path=\"/about-me\" component={AboutMePage}/>\r\n                   <Route path=\"/item\" component={ItemPade}/>\r\n                   <Redirect to=\"/\"/>\r\n                   </Switch>\r\n               </Router>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}